(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{190:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"react-核心知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-核心知识","aria-hidden":"true"}},[e._v("#")]),e._v(" React 核心知识")]),e._v(" "),a("h2",{attrs:{id:"time-slicing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-slicing","aria-hidden":"true"}},[e._v("#")]),e._v(" Time slicing")]),e._v(" "),a("p",[e._v("We've built a generic way to ensure that high-priority updates like user input don't get blocked by rendering low-priority updates.")]),e._v(" "),a("p",[e._v("CPU 层面优化")]),e._v(" "),a("p",[e._v("ReactJS 关注设备的 CPU 能力。在渲染时，ReactJS 确保它不会阻塞线程，从而导致应用程序冻结。")]),e._v(" "),a("p",[e._v("时间分片允许现在在 React Fiber 上运行的 ReactJS 在空闲回调期间将子组件的更新计算分成块，并且渲染工作分布在多个帧上。现在，在异步呈现过程中，它确保如果用户的设备非常快，应用程序内的更新会感觉同步，如果用户的设备很慢，则应用程序会感觉响应。没有冻结，没有 janky UI 体验！")]),e._v(" "),a("h2",{attrs:{id:"suspense"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suspense","aria-hidden":"true"}},[e._v("#")]),e._v(" Suspense")]),e._v(" "),a("p",[e._v("We have built a generic way for components to suspend rendering while they load asynchronous data.")]),e._v(" "),a("p",[e._v("Suspense 的简单定义是 ReactJS 可以暂停任何状态更新，直到提取的数据准备好呈现。本质上，ReactJS 在等待完全获取数据的同时挂起组件树。在暂停期间，它继续处理其他高优先级更新。")])])}],!1,null,null,null);r.options.__file="libary-react-core.md";t.default=r.exports}}]);