(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{179:function(e,t,i){"use strict";i.r(t);var n=i(0),l=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"node-小知识"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#node-小知识","aria-hidden":"true"}},[e._v("#")]),e._v(" node 小知识")]),i("ul",[i("li",[i("p",[e._v("node 适用于 I/O 密集型，不适合于 CPU 密集型。")])]),i("li",[i("p",[e._v("帮助实践轮询的 libuv 库 V8 不是一个线程。")])]),i("li",[i("p",[e._v("并不是所有都用一部任务好，遵循一个公式： s= (Ws+Wp)/(Ws+Wp/p) ws 表示同步任务，Wp 表示异步任务，p 表示处理器的数量。")])]),i("li",[i("p",[e._v("libuv 在 linux 下是 custom threadpool。")])]),i("li",[i("p",[e._v("libuv 在 windows 下是 iocp。")])]),i("li",[i("p",[e._v("node 代码单线程，可以通过引入 cluster 模块，实现主从进程。")])]),i("li",[i("p",[e._v("node 垃圾回收机制：分代式回收机制（新生代，老生代）。")])]),i("li",[i("p",[e._v("新生代采用 scavenge 算法 ： from to 交换。")])]),i("li",[i("p",[e._v("老生代采用 标记清除（mark-swap），移动清除（mark-compact）。")])]),i("li",[i("p",[e._v("node 测试工具 node-inspector 。")])])])])}],!1,null,null,null);t.default=l.exports}}]);