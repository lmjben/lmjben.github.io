(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{292:function(s,t,e){"use strict";e.r(t);var a=e(0),o=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"web-登录鉴权"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-登录鉴权"}},[s._v("#")]),s._v(" Web 登录鉴权")]),s._v(" "),e("p",[s._v("Web 登录鉴权，是 web 中很重要的一个环节，下面介绍一下常用的几种方式。")]),s._v(" "),e("ul",[e("li",[s._v("Session + Cookie")]),s._v(" "),e("li",[s._v("Token")]),s._v(" "),e("li",[s._v("单点登录 SSO")]),s._v(" "),e("li",[s._v("第三方登录 OAuth")])]),s._v(" "),e("h2",{attrs:{id:"session-cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie"}},[s._v("#")]),s._v(" Session + Cookie")]),s._v(" "),e("p",[s._v("Http 本身是无状态协议，在每次请求时，服务器端无法确定请求者是否是同一个用户，为了解决这个问题，我们可以使用 Session + Cookie 的模式进行校验。")]),s._v(" "),e("h3",{attrs:{id:"session-cookie-实现流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie-实现流程"}},[s._v("#")]),s._v(" Session + Cookie 实现流程")]),s._v(" "),e("p",[s._v("1、用户登录")]),s._v(" "),e("p",[s._v("2、服务器端验证登录成功，创建 sessionId，保存到服务器端。")]),s._v(" "),e("p",[s._v("3、服务器端将 sessionId 写入 cookie 中。")]),s._v(" "),e("p",[s._v("4、客户端请求时带上 cookie，cookie 中包含 sessionId。")]),s._v(" "),e("p",[s._v("5、服务器端验证 sessionId，验证成功则识别成功。")]),s._v(" "),e("h3",{attrs:{id:"session-机制遇到的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session-机制遇到的问题"}},[s._v("#")]),s._v(" Session 机制遇到的问题")]),s._v(" "),e("p",[s._v("1、服务器端需要存放大量的 sessionId，服务器压力大。")]),s._v(" "),e("p",[s._v("2、服务器端集群时，sessionId 难以共享，sessionId 拷贝难度大。")]),s._v(" "),e("p",[s._v("3、可以使用 redis 等服务器共享 sessionId，但需要一定的成本。")]),s._v(" "),e("p",[s._v("4、因为 sessionId 存放在 cookie 中，所以无法避免 csrf 攻击。")]),s._v(" "),e("h2",{attrs:{id:"token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[s._v("#")]),s._v(" Token")]),s._v(" "),e("p",[s._v("为了解决 session 机制暴露出的诸多问题，我们可以使用 token 机制进行校验。")]),s._v(" "),e("h3",{attrs:{id:"token-机制实现流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-机制实现流程"}},[s._v("#")]),s._v(" Token 机制实现流程")]),s._v(" "),e("p",[s._v("1、用户登录。")]),s._v(" "),e("p",[s._v("2、服务器端验证登录成功，创建 token（包含过期时间，加密数据等）。")]),s._v(" "),e("p",[s._v("3、服务器端将 token 返回给客户端，由"),e("strong",[s._v("客户端自由保存")]),s._v("。")]),s._v(" "),e("p",[s._v("4、客户端请求时带上 token。")]),s._v(" "),e("p",[s._v("5、服务器端解密 token，验证过期时间等，验证有效则识别成功。")]),s._v(" "),e("h3",{attrs:{id:"token-机制的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-机制的优点"}},[s._v("#")]),s._v(" Token 机制的优点")]),s._v(" "),e("p",[s._v("1、服务器端不需要存放 token，每次请求根据 token 算法检查 token 合法性。")]),s._v(" "),e("p",[s._v("2、不需要 redis 等服务器，对服务器集群无任何影响。")]),s._v(" "),e("p",[s._v("3、token 可以不存放在 cookie 中，安全性能高。")]),s._v(" "),e("p",[s._v("4、使用动态 token，进一步加强安全性（会增大服务器端压力）。")]),s._v(" "),e("h3",{attrs:{id:"创建-token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-token"}},[s._v("#")]),s._v(" 创建 Token")]),s._v(" "),e("p",[s._v("创建 Token 最常用的方式是 JWT(json web token)。JWT 主要分为 3 个部分：header，playload，signature，其中 signature 是通过 header 和 playload 数据以及 header 中的加密算法得到的，服务器端通过这样的验证，可验证 token 是否被篡改。")]),s._v(" "),e("p",[s._v("signature 算法如下：")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HMACSHA256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("header"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" secret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 服务器私钥，防止被破解")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("JWT 的优点如下：")]),s._v(" "),e("ul",[e("li",[s._v("因为 JSON 的通用性，所以 JWT 是可以进行跨语言支持的。")]),s._v(" "),e("li",[s._v("降低服务器端维护成本，服务器端不需要存放大量的 session 信息。")]),s._v(" "),e("li",[s._v("JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息(payload 部分)。")]),s._v(" "),e("li",[s._v("JWT 的构成非常简单，字节占用很小，所以它是非常便于传输的。")])]),s._v(" "),e("h2",{attrs:{id:"单点登录-sso"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单点登录-sso"}},[s._v("#")]),s._v(" 单点登录 SSO")]),s._v(" "),e("p",[s._v("单点登录是指在公司内部搭建一个公共的认证中心，公司下的所有产品的登录都需要在认证中心里完成，在一个产品下登录后，访问另一个产品，登录态不会消失。")]),s._v(" "),e("h3",{attrs:{id:"单点登录机制实现流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单点登录机制实现流程"}},[s._v("#")]),s._v(" 单点登录机制实现流程")]),s._v(" "),e("p",[s._v("1、登录网站 "),e("code",[s._v("a.company.com")]),s._v("。")]),s._v(" "),e("p",[s._v("2、重定向到认证中心登录，带上回调地址"),e("code",[s._v("www.sso.com?return_uri=A.com/callback")]),s._v("。")]),s._v(" "),e("p",[s._v("3、输入认证中心账号密码，提交登录。")]),s._v(" "),e("p",[s._v("4、登陆后被重定向 "),e("code",[s._v("a.company.com?ticket=123")]),s._v(" 带上授权码 ticket，并将认证中的的登录态写入 cookie。")]),s._v(" "),e("p",[s._v("5、重定向 "),e("code",[s._v("a.company.com?ticket=123")]),s._v(" 后，服务器使用 ticket 向认证中心验证，判断是否已登录。")]),s._v(" "),e("p",[s._v("6、验证成功后服务器将登录信息写入 cookie（这时客户端有 2 个 cookie 分别存有 "),e("code",[s._v("a.company.com")]),s._v(" 和认证中心的登录态）。")]),s._v(" "),e("p",[s._v("7、再次访问 "),e("code",[s._v("a.company.com")]),s._v(" 下的页面时，因为保存有 "),e("code",[s._v("a.company.com")]),s._v(" 的 cookie 信息，服务器直接认证成功。")]),s._v(" "),e("p",[s._v("8、访问 "),e("code",[s._v("b.company.com")]),s._v(" 时，由于保存的有认证中心的 cookie，所以也不用再次输入账号密码，直接返回第 4 步。")]),s._v(" "),e("p",[s._v("首次登录流程图如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"osi-web-login-sso1.jpeg",alt:"首次登录"}})]),s._v(" "),e("p",[s._v("登录同域下的网站：")]),s._v(" "),e("p",[e("img",{attrs:{src:"osi-web-login-sso2.jpeg",alt:"登录同域下的网站"}})]),s._v(" "),e("p",[s._v("登录不同域下的网站：")]),s._v(" "),e("p",[e("img",{attrs:{src:"osi-web-login-sso3.jpeg",alt:"登录不同域下的网站"}})]),s._v(" "),e("h2",{attrs:{id:"第三方登录-oauth"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三方登录-oauth"}},[s._v("#")]),s._v(" 第三方登录 OAuth")]),s._v(" "),e("p",[s._v("使用单点登录的方式，得我们自己部署一套登录认证中心，对于小型企业未免太麻烦了，其实，还可以大厂提供的第三方服务授权，进行身份验证。")]),s._v(" "),e("h3",{attrs:{id:"oauth-机制实现流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oauth-机制实现流程"}},[s._v("#")]),s._v(" OAuth 机制实现流程")]),s._v(" "),e("p",[s._v("1、登录网站 "),e("code",[s._v("a.com")]),s._v("。")]),s._v(" "),e("p",[s._v("2、重定向到网易授权登录，带上回调地址 "),e("code",[s._v("www.163.com?appid=xxx&return_uri=a.com/callback")]),s._v("。")]),s._v(" "),e("p",[s._v("3、在网易中会带上具体授权的类型（可自定义选择权限），然后输入网易账号和密码，提交登录。")]),s._v(" "),e("p",[s._v("4、登陆后被重定向会 "),e("code",[s._v("a.com?code=123")]),s._v(" 带上一个授权码 code。")]),s._v(" "),e("p",[s._v("5、接下来 "),e("code",[s._v("a.com")]),s._v(" 会根据 code，去请求网易服务器，获取网易颁发的 token。")]),s._v(" "),e("p",[s._v("6、接下来 "),e("code",[s._v("a.com")]),s._v(" 直接使用 token 去网易服务器获取数据。")]),s._v(" "),e("p",[s._v("7、登录成功。")]),s._v(" "),e("p",[s._v("具体的登录流程如下：")]),s._v(" "),e("p",[e("img",{attrs:{src:"osi-web-login-oauth.jpg",alt:"第三方登录"}})]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("这一章介绍了 4 中常见的登录校验方式，如果你正在考虑自己网站的登录验证，不妨做个参考。")]),s._v(" "),e("h2",{attrs:{id:"参考链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[s._v("#")]),s._v(" 参考链接")]),s._v(" "),e("p",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("JSON Web Token 入门教程"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);